# $Id: grammar.pcg,v 1.5 1999/02/19 10:39:02 phelps Exp $
#
# The grammar for the parser compiler, expressed in terms of itself.
# A grammar is merely a list of productions, which in turn consist of
# a nonerminal symbol ("<foo>" for example) followed by the standard
# BNF symbol "::=" and then the list of things which are generated by
# that production, terminals and nonterminals in order.  All of which
# is followed by a function name in square brackets which is to be
# called by the parser when it reduces the right-hand side of a
# production to the left-hand side.
#

<grammar> ::= <production-list>
	[Accept]

<production-list> ::= <production-list> <production>
	[ProductionListExtend]
<production-list> ::= <production>
	[ProductionListCreate]

<production> ::= nonterm derives <exp-list> function
	[ProductionCreate]

<exp-list> ::= <exp-list> nonterm
	[ExpListAddNonterminal]
<exp-list> ::= <exp-list> term
	[ExpListAddTerminal]
<exp-list> ::= nonterm
	[ExpListCreateNonterminal]
<exp-list> ::= term
	[ExpListCreateTerminal]
