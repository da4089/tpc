# $Id: grammar.pcg,v 1.7 1999/12/11 18:17:57 phelps Exp $
#
# The grammar for the parser compiler, expressed in terms of itself.
# A grammar is merely a list of productions, which in turn consist of
# a nonerminal symbol ("<foo>" for example) followed by the standard
# BNF symbol "::=" and then the list of things which are generated by
# that production, terminals and nonterminals in order.  All of which
# is followed by a function name in square brackets which is to be
# called by the parser when it reduces the right-hand side of a
# production to the left-hand side.
#

<grammar> ::= <production-list>
	[accept_grammar]

<production-list> ::= <production-list> <production>
	[extend_production_list]
<production-list> ::= <production>
	[make_production_list]

<production> ::= <nonterminal> DERIVES <exp-list> <function>
	[make_production]

<exp-list> ::= <exp-list> <nonterminal>
	[add_component]
<exp-list> ::= <exp-list> <terminal>
	[add_component]
<exp-list> ::= <nonterminal>
	[make_exp_list]
<exp-list> ::= <terminal>
	[make_exp_list]

<nonterminal> ::= LT ID GT
	[make_nonterminal]

<terminal> ::= ID
	[make_terminal]

<function> ::= LBRACKET ID RBRACKET
	[make_function]
