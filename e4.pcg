###############################################################
#
#  Copyright (C) DSTC Pty Ltd (ACN 052 372 577) 1998.
#  Unpublished work.  All Rights Reserved.
#
#  The software contained on this media is the property of the
#  DSTC Pty Ltd.  Use of this software is strictly in accordance
#  with the license agreement in the accompanying LICENSE.DOC
#  file.  If your distribution of this software does not contain
#  a LICENSE.DOC file then you have no rights to use this
#  software in any manner and should contact DSTC at the address
#  below to determine an appropriate licensing arrangement.
#
#     DSTC Pty Ltd
#     Level 7, Gehrmann Labs
#     University of Queensland
#     St Lucia, 4072
#     Australia
#     Tel: +61 7 3365 4310
#     Fax: +61 7 3365 4311
#     Email: enquiries@dstc.edu.au
#
#  This software is being provided "AS IS" without warranty of
#  any kind.  In no event shall DSTC Pty Ltd be liable for
#  damage of any kind arising out of or in connection with
#  the use or performance of this software.
#
#
#  Project:  Elvin: event notification
#
#  File:     $Source: /home/phelps/CVS/tpc/e4.pcg,v $
#
#  Description:
#            Grammar for the elvin4 subscription language
#
#  Author:
#            Ted Phelps
#
#################################################################

<sub-exp> ::= <disjunction>
	[accept_sub]

#
# We introduce <function-exp> in order to get around the inherent
# ambiguity of the grammar.  Without these two productions, there is
# no way to reduce the following two sentences:
#
#	(exists(FOO))
#	(sizeof(BOB)) == 3
#
# By adding these two productions, the decision about whether these
# the function returns a boolean value or a number/string is delayed
# until we have enough information to do the proper reduction
#
# Note that the first function-exp production must appear *before* the 
# <bool-exp> ::= <function-exp> or <num-value> ::= <function-exp>
# productions because the parser compiler will use the first listed
# production when it encounters this ambiguity.
#
<function-exp> ::= LPAREN <function-exp> RPAREN
	[identity2]
<function-exp> ::= <function>
	[identity]

# Functions with arguments
<function> ::= ID LPAREN <args> RPAREN
	[create_function_n]

# Functions with no arguments
<function> ::= ID LPAREN RPAREN
	[create_function_0]

# Argument lists of varying lengths
<args> ::= <args> COMMA <value>
	[extend_args]
<args> ::= <value>
	[create_args]


#
# Boolean expression productions
#

<disjunction> ::= <disjunction> OR <xor-exp>
	[extend_disjunction]
<disjunction> ::= <xor-exp>
	[create_disjunction]

<xor-exp> ::= <xor-exp> XOR <conjunction>
	[extend_xor_exp]
<xor-exp> ::= <conjunction>
	[create_xor_exp]

<conjunction> ::= <conjunction> AND <bool-exp>
	[extend_conjunction]
<conjunction> ::= <bool-exp>
	[create_conjunction]

<bool-exp> ::= <value> EQ <value>
	[create_eq_comparison]
<bool-exp> ::= <value> NEQ <value>
	[create_neq_comparison]
<bool-exp> ::= <bit-disjunction> LT <bit-disjunction>
	[create_lt_comparison]
<bool-exp> ::= <bit-disjunction> LE <bit-disjunction>
	[create_le_comparison]
<bool-exp> ::= <bit-disjunction> GT <bit-disjunction>
	[create_gt_comparison]
<bool-exp> ::= <bit-disjunction> GE <bit-disjunction>
	[create_ge_comparison]
<bool-exp> ::= <function-exp>
	[identity]
<bool-exp> ::= BANG <bool-exp>
	[create_not_op]
<bool-exp> ::= LPAREN <disjunction> RPAREN
	[identity2]

<value> ::= STRING
	[identity]
<value> ::= <bit-disjunction>
	[identity]


#
# String and numeric expression productions
#

<bit-disjunction> ::= <bit-disjunction> BIT_OR <bit-xor-exp>
	[create_or_op]
<bit-disjunction> ::= <bit-xor-exp>
	[identity]

<bit-xor-exp> ::= <bit-xor-exp> BIT_XOR <bit-conjunction>
	[create_xor_op]
<bit-xor-exp> ::= <bit-conjunction>
	[identity]

<bit-conjunction> ::= <bit-conjunction> BIT_AND <bit-shift-exp>
	[create_and_op]
<bit-conjunction> ::= <bit-shift-exp>
	[identity]

<bit-shift-exp> ::= <bit-shift-exp> BIT_SHL <sum>
	[create_shl_op]
<bit-shift-exp> ::= <bit-shift-exp> BIT_SHR <sum>
	[create_shr_op]
<bit-shift-exp> ::= <bit-shift-exp> BIT_LSR <sum>
	[create_lsr_op]
<bit-shift-exp> ::= <sum>
	[identity]

<sum> ::= <sum> PLUS <product>
	[create_plus_op]
<sum> ::= <sum> MINUS <product>
	[create_minus_op]
<sum> ::= <product>
	[identity]

<product> ::= <product> TIMES <num-value>
	[create_times_op]
<product> ::= <product> DIV <num-value>
	[create_div_op]
<product> ::= <product> MOD <num-value>
	[create_mod_op]
<product> ::= <num-value>
	[identity]


<num-value> ::= INT32
	[identity]
<num-value> ::= INT64
	[identity]
<num-value> ::= REAL64
	[identity]
<num-value> ::= <name>
	[identity]
<num-value> ::= <function-exp>
	[identity]
<num-value> ::= PLUS <num-value>
	[create_uplus_op]
<num-value> ::= MINUS <num-value>
	[create_uminus_op]
<num-value> ::= NEG <num-value>
	[create_neg_op]
<num-value> ::= LPAREN <value> RPAREN
	[identity2]

<name> ::= ID
	[name_from_id]


