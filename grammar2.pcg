# $Id: grammar2.pcg,v 1.1 1999/12/11 16:13:23 phelps Exp $
#
# The grammar for the parser compiler, expressed in terms of itself.
# A grammar is merely a list of productions, which in turn consist of
# a nonerminal symbol ("<foo>" for example) followed by the standard
# BNF symbol "::=" and then the list of things which are generated by
# that production, terminals and nonterminals in order.  All of which
# is followed by a function name in square brackets which is to be
# called by the parser when it reduces the right-hand side of a
# production to the left-hand side.
#

grammar ::= production-list
	[accept_grammar]

production-list ::= production-list production
	[extend_production_list]
production-list ::= production
	[make_production_list]

production ::= nonterminal "DERIVES" exp-list function
	[make_production]

exp-list ::= exp-list nonterminal
	[add_nonterminal]
exp-list ::= exp-list terminal
	[add_terminal]
exp-list ::= nonterminal
	[make_exp_list_with_nonterminal]
exp-list ::= terminal
	[make_exp_list_with_terminal]

nonterminal ::= "ID"
	[make_nonterminal]
terminal ::= "STRING"
	[make_terminal]
function ::= "LBRACKET" "ID" "RBRACKET"
	[make_function]